// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace CoreBridge
{
    public unsafe abstract partial class ICore : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal __IntPtr vfptr_ICore;

            [SuppressUnmanagedCodeSecurity, DllImport("CoreBridge", EntryPoint = "??0ICore@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("CoreBridge", EntryPoint = "??0ICore@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "GetInterfaceCore", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetInterfaceCore();
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::CoreBridge.ICore> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::CoreBridge.ICore>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::CoreBridge.ICore managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::CoreBridge.ICore managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static ICore __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new ICoreInternal(native.ToPointer(), skipVTables);
        }

        internal static ICore __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (ICore)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static ICore __GetInstance(__IntPtr native)
        {
            if (!__TryGetNativeToManagedMapping(native, out var managed))
                throw new global::System.Exception("No managed instance was found");
            var result = (ICore)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static ICore __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ICoreInternal(native, skipVTables);
        }

        protected ICore(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        protected ICore()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::CoreBridge.ICore.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "CoreBridge.ICore");
        }

        protected ICore(global::CoreBridge.ICore _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::CoreBridge.ICore.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "CoreBridge.ICore");
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            *(IntPtr*)(__Instance + 0) = __VTables.Tables[0];
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }   

        public abstract void RegServerCommand(string command);

        public abstract void RegClientCommand(string command, int client);

        public static global::CoreBridge.ICore InterfaceCore
        {
            get
            {
                var ___ret = __Internal.GetInterfaceCore();
                var __result0 = global::CoreBridge.ICore.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        #region Virtual table interop

        // void RegServerCommand(const char *command) = 0
        private static global::CoreBridge.Delegates.Action___IntPtr_string8 _RegServerCommandDelegateInstance;

        private static void _RegServerCommandDelegateHook(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string command)
        {
            var __target = global::CoreBridge.ICore.__GetInstance(__instance);
            __target.RegServerCommand(command);
        }

        // void RegClientCommand(const char *command, int client) = 0
        private static global::CoreBridge.Delegates.Action___IntPtr_string8_int _RegClientCommandDelegateInstance;

        private static void _RegClientCommandDelegateHook(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string command, int client)
        {
            var __target = global::CoreBridge.ICore.__GetInstance(__instance);
            __target.RegClientCommand(command, client);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[2];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();
                
            static VTableLoader()
            {
                _RegServerCommandDelegateInstance += _RegServerCommandDelegateHook;
                _RegClientCommandDelegateInstance += _RegClientCommandDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_RegServerCommandDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_RegClientCommandDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 2, 0);
                            ManagedVTables[0][0] = Thunks[0];
                            ManagedVTables[0][1] = Thunks[1];
                            VTables.Methods[0] = new Delegate[2];
                            if (destructorOnly)
                                return VTables;
                        }
                    }
                }

                *(IntPtr**)(instance + 0) = ManagedVTables[0];
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        {
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {    
                __vtables = value;
            }
        }
        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }

    public unsafe partial class ICoreInternal : global::CoreBridge.ICore, IDisposable
    {
        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal ICoreInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        internal ICoreInternal(void* native, bool skipVTables = false)
            : base((void*) native)
        {
        }

        public override void RegServerCommand(string command)
        {
            var ___RegServerCommandDelegate = __VTables.GetMethodDelegate<global::CoreBridge.Delegates.Action___IntPtr_string8>(0, 0);
            ___RegServerCommandDelegate(__Instance, command);
        }

        public override void RegClientCommand(string command, int client)
        {
            var ___RegClientCommandDelegate = __VTables.GetMethodDelegate<global::CoreBridge.Delegates.Action___IntPtr_string8_int>(0, 1);
            ___RegClientCommandDelegate(__Instance, command, client);
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_string8(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string arg1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        internal unsafe delegate void Action___IntPtr_string8_int(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string arg1, int arg2);
    }
}
