// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace SourceSharp.Core.Bridges
{
    public unsafe partial class SSConVar
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarAddFlags", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddFlags(__IntPtr __instance, int nFlags);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarSetBound", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBound(__IntPtr __instance, bool bHasMin, float flMin, bool bHasMax, float flMax);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarRevert", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Revert(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarReplicateToPlayers", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ReplicateToPlayers(__IntPtr __instance, int[] pPlayers, int nPlayers);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetName(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetDefault", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDefault(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetDescription", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDescription(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetFlags", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFlags(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetInt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetInt(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarSetInt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetInt(__IntPtr __instance, int val);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetBool", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBool(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarSetBool", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBool(__IntPtr __instance, bool val);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetFloat", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetFloat(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarSetFloat", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFloat(__IntPtr __instance, float val);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetString(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarSetString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetString(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string val);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetMinValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetMinValue(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetMaxValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetMaxValue(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetHasMin", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHasMin(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "SSConVarGetHasMax", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetHasMax(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SourceSharp.Core.Bridges.SSConVar> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::SourceSharp.Core.Bridges.SSConVar>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::SourceSharp.Core.Bridges.SSConVar managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::SourceSharp.Core.Bridges.SSConVar managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static SSConVar __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new SSConVar(native.ToPointer(), skipVTables);
        }

        internal static SSConVar __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (SSConVar)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static SSConVar __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new SSConVar(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SSConVar(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected SSConVar(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void AddFlags(int nFlags)
        {
            __Internal.AddFlags(__Instance, nFlags);
        }

        public void SetBound(bool bHasMin, float flMin, bool bHasMax, float flMax)
        {
            __Internal.SetBound(__Instance, bHasMin, flMin, bHasMax, flMax);
        }

        public void Revert()
        {
            __Internal.Revert(__Instance);
        }

        public bool ReplicateToPlayers(int[] pPlayers, int nPlayers)
        {
            var ___ret = __Internal.ReplicateToPlayers(__Instance, pPlayers, nPlayers);
            return ___ret;
        }

        public string Name
        {
            get
            {
                var ___ret = __Internal.GetName(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public string Default
        {
            get
            {
                var ___ret = __Internal.GetDefault(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public string Description
        {
            get
            {
                var ___ret = __Internal.GetDescription(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public int Flags
        {
            get
            {
                var ___ret = __Internal.GetFlags(__Instance);
                return ___ret;
            }
        }

        public int Int
        {
            get
            {
                var ___ret = __Internal.GetInt(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetInt(__Instance, value);
            }
        }

        public bool Bool
        {
            get
            {
                var ___ret = __Internal.GetBool(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetBool(__Instance, value);
            }
        }

        public float Float
        {
            get
            {
                var ___ret = __Internal.GetFloat(__Instance);
                return ___ret;
            }

            set
            {
                __Internal.SetFloat(__Instance, value);
            }
        }

        public string String
        {
            get
            {
                var ___ret = __Internal.GetString(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }

            set
            {
                __Internal.SetString(__Instance, value);
            }
        }

        public float MinValue
        {
            get
            {
                var ___ret = __Internal.GetMinValue(__Instance);
                return ___ret;
            }
        }

        public float MaxValue
        {
            get
            {
                var ___ret = __Internal.GetMaxValue(__Instance);
                return ___ret;
            }
        }

        public bool HasMin
        {
            get
            {
                var ___ret = __Internal.GetHasMin(__Instance);
                return ___ret;
            }
        }

        public bool HasMax
        {
            get
            {
                var ___ret = __Internal.GetHasMax(__Instance);
                return ___ret;
            }
        }
    }

    public unsafe partial class ConVar
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "CreateConVar", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr CreateConVar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pDECLValue, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pDescription, int nFlags, bool bHasMin, float flMin, bool bHasMax, float flMax);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "FindConVar", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FindConVar([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pName);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "RegisterConVarHook", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RegisterConVarHook([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pName);

            [SuppressUnmanagedCodeSecurity, DllImport("sourcesharp", EntryPoint = "TestConVar", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestConVar(__IntPtr pVar);
        }

        public static global::SourceSharp.Core.Bridges.SSConVar CreateConVar(string pName, string pDECLValue, string pDescription, int nFlags, bool bHasMin, float flMin, bool bHasMax, float flMax)
        {
            var ___ret = __Internal.CreateConVar(pName, pDECLValue, pDescription, nFlags, bHasMin, flMin, bHasMax, flMax);
            var __result0 = global::SourceSharp.Core.Bridges.SSConVar.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static global::SourceSharp.Core.Bridges.SSConVar FindConVar(string pName)
        {
            var ___ret = __Internal.FindConVar(pName);
            var __result0 = global::SourceSharp.Core.Bridges.SSConVar.__GetOrCreateInstance(___ret, false);
            return __result0;
        }

        public static bool RegisterConVarHook(string pName)
        {
            var ___ret = __Internal.RegisterConVarHook(pName);
            return ___ret;
        }

        public static int TestConVar(global::SourceSharp.Core.Bridges.SSConVar pVar)
        {
            var __arg0 = pVar is null ? __IntPtr.Zero : pVar.__Instance;
            var ___ret = __Internal.TestConVar(__arg0);
            return ___ret;
        }
    }
}
