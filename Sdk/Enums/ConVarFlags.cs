using System;

namespace SourceSharp.Sdk.Enums;

[Flags]
public enum ConVarFlags : uint
{
    /// <summary>
    /// No flags
    /// </summary>
    None,

    /*
     *  Command to ConVars and ConCommands
     */

    // ConVar Systems

    /// <summary>
    /// If this is set, don't add to linked list, etc.
    /// </summary>
    Unregistered = (1 << 0),

    /// <summary>
    /// Hidden in released products. Flag is removed automatically if ALLOW_DEVELOPMENT_CVARS is defined.
    /// </summary>
    DevelopmentOnly = (1 << 1),

    /// <summary>
    /// defined by the game DLL
    /// </summary>
    GameDll = (1 << 2),

    /// <summary>
    /// defined by the client DLL
    /// </summary>
    ClientDll = (1 << 3),

    /// <summary>
    /// Hidden. Doesn't appear in find or auto complete. Like DEVELOPMENTONLY, but can't be compiled out.
    /// </summary>
    Hidden = (1 << 4),

    // ConVar only

    /// <summary>
    /// It's a server cvar, but we don't send the data since it's a password, etc.  Sends 1 if it's not bland/zero, 0 otherwise as value
    /// </summary>
    Protected = (1 << 5),

    /// <summary>
    /// This cvar cannot be changed by clients connected to a multiplayer server.
    /// </summary>
    SinglePlayerOnly = (1 << 6),

    /// <summary>
    /// set to cause it to be saved to vars.rc
    /// </summary>
    Archive = (1 << 7),

    /// <summary>
    /// notifies players when changed
    /// </summary>
    NOtify = (1 << 8),

    /// <summary>
    /// changes the client's info string
    /// </summary>
    UserInfo = (1 << 9),

    /// <summary>
    /// This cvar's string cannot contain unprintable characters= ( e.g., used for player name etc ).
    /// </summary>
    PrintableOnly = (1 << 10),

    /// <summary>
    /// When on concommands this allows remote clients to execute this cmd on the server. 
    /// We are changing the default behavior of concommands to disallow execution by remote clients without
    /// this flag due to the number existing concommands that can lag or crash the server when clients abuse them.
    /// </summary>
    GameDllForRemoteClients = PrintableOnly,

    /// <summary>
    /// If this is a FCVAR_SERVER, don't log changes to the log file / console if we are creating a log
    /// </summary>
    UnLogged = (1 << 11),

    /// <summary>
    /// never try to print that cvar
    /// </summary>
    NeverAsString = (1 << 12),

    /// <summary>
    /// It's a ConVar that's shared between the client and the server.
    /// At signon, the values of all such ConVars are sent from the server to the client= (skipped for local
    ///  client, of course )
    /// If a change is requested it must come from the console= (i.e., no remote client changes)
    /// If a value is changed while a server is active, it's replicated to all connected clients
    /// server setting enforced on clients,
    /// TODO rename to FCAR_SERVER at some time
    /// </summary>
    Replicated = (1 << 13),

    /// <summary>
    /// Only useable in singleplayer / debug / multiplayer & sv_cheats
    /// </summary>
    Cheat = (1 << 14),

    //causes varnameN where N == 2 through max splitscreen slots for mod to be autogenerated
    SplitScreen = (1 << 15),

    /// <summary>
    /// record this cvar when starting a demo file
    /// </summary>
    Demo = (1 << 16),

    /// <summary>
    /// don't record these command in demofiles
    /// </summary>
    DoNotRecord = (1 << 17),

    /// <summary>
    /// This is one of the "added" FCVAR_SS variables for the splitscreen players
    /// </summary>
    SplitScreenAdded = (1 << 18),

    /// <summary>
    /// Cvars tagged with this are the only cvars avaliable to customers
    /// </summary>
    Release = (1 << 19),

    /// <summary>
    /// If this cvar changes, it forces a material reload
    /// </summary>
    ReloadMaterials = (1 << 20),


    /// <summary>
    /// If this cvar changes, if forces a texture reload
    /// </summary>
    ReloadTextures = (1 << 21),

    /// <summary>
    /// cvar cannot be changed by a client that is connected to a server
    /// </summary>
    NotConnected = (1 << 22),

    /// <summary>
    ///  Indicates this cvar is read from the material system thread
    /// </summary>
    MaterialSystemThread = (1 << 23),


    /// <summary>
    /// cvar written to config.cfg on the Xbox
    /// </summary>
    ArchiveGameConsole = (1 << 24),


    /// <summary>
    /// the server is allowed to execute this command on clients via ClientCommand/NET_StringCmd/CBaseClientState::ProcessStringCmd.
    /// </summary>
    ServerCanExecute = (1 << 28),

    /// <summary>
    ///  If this is set, then the server is not allowed to query this cvar's value= (via IServerPluginHelpers::StartQueryCvarValue).
    /// </summary>
    ServerCanNotQuery = (1 << 29),

    /// <summary>
    /// IVEngineClient::ClientCmd is allowed to execute this command.
    /// Note: IVEngineClient::ClientCmd_Unrestricted can run any client command.
    /// </summary>
    ClientCommandCanExecute = (1 << 30),

    /// <summary>
    /// used as a debugging tool necessary to check material system thread convars
    /// </summary>
    AccessibleFromThreads = (1 << 25),


    MaterialThreadMask = (ReloadMaterials | ReloadTextures | MaterialSystemThread),

}
